package transformers

import (
	"encoding/binary"
	"fmt"
	"slices"

	"github.com/greenmaskio/greenmask/internal/generators"
)

const (
	MaleGenderName   = "Male"
	FemaleGenderName = "Female"
	AnyGenderName    = "Any"
)

const (
	RandomFullNameTransformerFullNameMode = iota
	RandomFullNameTransformerFirstNameMode
	RandomFullNameTransformerSurnameMode
)

var DefaultFirstNamesMale = []string{
	"Александр", "Алексей", "Андрей", "Антон", "Артем", "Артур", "Борис", "Вадим", "Валентин", "Валерий", "Василий", "Виктор", "Виталий", "Владимир", "Владислав", "Вячеслав", "Георгий", "Глеб", "Григорий", "Данил", "Даниил", "Дмитрий", "Евгений", "Егор", "Елисей", "Иван", "Игорь", "Илья", "Кирилл", "Константин", "Леонид", "Максим", "Марк", "Матвей", "Михаил", "Никита", "Николай", "Олег", "Павел", "Петр", "Роман", "Руслан", "Сергей", "Станислав", "Степан", "Тимофей", "Тимур", "Федор", "Филипп", "Юрий", "Ярослав",
	"Авраам", "Адам", "Адриан", "Азат", "Айрат", "Аким", "Альберт", "Амир", "Анатолий", "Аркадий", "Арсений", "Арсен", "Артемий", "Богдан", "Булат", "Венедикт", "Виссарион", "Всеволод", "Всемил", "Гавриил", "Геннадий", "Герман", "Глеб", "Давид", "Демид", "Денис", "Дорофей", "Ефим", "Захар", "Иннокентий", "Исаак", "Казимир", "Камиль", "Клим", "Лев", "Леонтий", "Лука", "Макар", "Мирон", "Мстислав", "Назар", "Натан", "Нестор", "Никифор", "Остап", "Платон", "Прохор", "Радик", "Ратмир", "Ренат", "Родион", "Савва", "Савелий", "Семен", "Серафим", "Тарас", "Тихон", "Трофим", "Фома", "Харитон", "Эдуард", "Эмиль", "Эрик", "Ян",
}

var DefaultFirstNamesFemale = []string{
	"Александра", "Алина", "Алиса", "Алла", "Анастасия", "Анна", "Антонина", "Анфиса", "Валентина", "Валерия", "Варвара", "Вера", "Вероника", "Виктория", "Галина", "Дарья", "Диана", "Евгения", "Екатерина", "Елена", "Елизавета", "Жанна", "Зинаида", "Зоя", "Инна", "Ирина", "Кира", "Ксения", "Лариса", "Лидия", "Любовь", "Людмила", "Маргарита", "Марина", "Мария", "Надежда", "Наталья", "Нина", "Оксана", "Ольга", "Полина", "Раиса", "Светлана", "София", "Татьяна", "Ульяна", "Юлия", "Яна",
	"Агата", "Агния", "Аделина", "Алевтина", "Альбина", "Амалия", "Ангелина", "Арина", "Белла", "Богдана", "Василиса", "Виолетта", "Владислава", "Дина", "Злата", "Изабелла", "Кристина", "Лада", "Лилия", "Майя", "Милана", "Мирослава", "Николь", "Регина", "Римма", "Роза", "Руслана", "Снежана", "Стефания", "Таисия", "Тамара", "Ульяна", "Устинья", "Фаина", "Эвелина", "Эльвира", "Эмилия", "Юлиана", "Ярослава",
}

var DefaultLastNamesMale = []string{
	"Иванов", "Петров", "Сидоров", "Смирнов", "Кузнецов", "Попов", "Васильев", "Соколов", "Михайлов", "Новиков", "Федоров", "Морозов", "Волков", "Алексеев", "Лебедев", "Семенов", "Егоров", "Павлов", "Козлов", "Степанов", "Николаев", "Орлов", "Андреев", "Макаров", "Никитин", "Захаров", "Зайцев", "Соловьев", "Борисов", "Яковлев", "Григорьев", "Романов", "Воробьев", "Сергеев", "Кириллов", "Фролов", "Александров", "Дмитриев", "Королев", "Гусев", "Киселев", "Максимов", "Поляков", "Виноградов", "Ковалев", "Белов", "Медведев", "Антонов", "Тарасов", "Жуков", "Баранов", "Филиппов", "Комаров", "Давыдов", "Беляев", "Герасимов", "Богданов", "Осипов", "Сидоренко", "Матвеев", "Титов", "Марков", "Миронов", "Крылов", "Куликов", "Карпов", "Власов", "Мельников", "Денисов", "Гаврилов", "Тихонов", "Казаков", "Афанасьев", "Данилов", "Савельев", "Тимофеев", "Фомин", "Чернов", "Абрамов", "Мартынов", "Ефимов", "Федотов", "Щербаков", "Назаров", "Калинин", "Исаев", "Чернышев", "Быков", "Маслов", "Родионов", "Коновалов", "Лазарев", "Воронин", "Климов", "Филатов", "Пономарев", "Голубев", "Кудрявцев", "Прохоров", "Наумов", "Потапов", "Журавлев", "Овчинников", "Трофимов", "Леонов", "Соболев", "Терентьев", "Панов", "Красильников", "Лукин", "Коршунов", "Константинов", "Ершов", "Самойлов", "Мамонтов", "Шестаков", "Гордеев", "Никифоров", "Воронцов", "Измайлов", "Зуев", "Капустин", "Корнилов", "Галкин", "Савин", "Алешин", "Бобров", "Доронин", "Белоусов", "Рогов", "Евдокимов", "Калашников", "Кабанов", "Носов", "Юдин", "Кулагин", "Лапин", "Прокофьев", "Нестеров", "Харитонов", "Агафонов", "Муравьев", "Ларионов", "Федосеев", "Зимин", "Пахомов", "Шубин", "Игнатов", "Филимонов", "Крюков", "Рогозин", "Майоров", "Блинов", "Парфенов", "Портнов", "Балашов", "Тихомиров", "Барсуков", "Фадеев", "Емельянов", "Большаков", "Сазонов", "Булгаков", "Золотарев", "Николенко", "Турбин", "Олейник", "Шевченко", "Мироненко", "Гриценко", "Коваленко", "Бондаренко", "Ткаченко", "Шаповалов", "Гончаров", "Рыбаков", "Макеев", "Зубов", "Панкратов", "Копылов", "Горшков", "Майков", "Емелин", "Вишняков", "Дроздов", "Кольцов", "Карташов", "Селезнев", "Wide", "Горбунов", "Анисимов", "Петухов", "Дьяконов", "Щукин", "Кошелев", "Костин", "Горбачев", "Орехов", "Ефремов", "Исаков", "Евсеев", "Бородин", "Сафонов", "Лосев", "Цветков", "Шишкин",
}

var DefaultLastNamesFemale = []string{
	"Иванова", "Петрова", "Сидорова", "Смирнова", "Кузнецова", "Попова", "Васильева", "Соколова", "Михайлова", "Новикова", "Федорова", "Морозова", "Волкова", "Алексеева", "Лебедева", "Семенова", "Егорова", "Павлова", "Козлова", "Степанова", "Николаева", "Орлова", "Андреева", "Макарова", "Никитина", "Захарова", "Зайцева", "Соловьева", "Борисова", "Яковлева", "Григорьева", "Романова", "Воробьева", "Сергеева", "Кириллова", "Фролова", "Александрова", "Дмитриева", "Королева", "Гусева", "Киселева", "Максимова", "Полякова", "Виноградова", "Ковалева", "Белова", "Медведева", "Антонова", "Тарасова", "Жукова", "Баранова", "Филиппова", "Комарова", "Давыдова", "Беляева", "Герасимова", "Богданова", "Осипова", "Сидоренко", "Матвеева", "Титова", "Маркова", "Миронова", "Крылова", "Куликова", "Карпова", "Власова", "Мельникова", "Денисова", "Гаврилова", "Тихонова", "Казакова", "Афанасьева", "Данилова", "Савельева", "Тимофеева", "Фомина", "Чернова", "Абрамова", "Мартынова", "Ефимова", "Федотова", "Щербакова", "Назарова", "Калинина", "Исаева", "Чернышева", "Быкова", "Маслова", "Родионова", "Коновалова", "Лазарева", "Воронина", "Климова", "Филатова", "Пономарева", "Голубева", "Кудрявцева", "Прохорова", "Наумова", "Потапова", "Журавлева", "Овчинникова", "Трофимова", "Леонова", "Соболева", "Терентьева", "Панова", "Красильникова", "Лукина", "Коршунова", "Константинова", "Ершова", "Самойлова", "Мамонтова", "Шестакова", "Гордеева", "Никифорова", "Воронцова", "Измайлова", "Зуева", "Капустина", "Корнилова", "Галкина", "Савина", "Алешина", "Боброва", "Доронина", "Белоусова", "Рогова", "Евдокимова", "Калашникова", "Кабанова", "Носова", "Юдина", "Кулагина", "Лапина", "Прокофьева", "Нестерова", "Харитонова", "Агафонова", "Муравьева", "Ларионова", "Федосеева", "Зимина", "Пахомова", "Шубина", "Игнатова", "Филимонова", "Крюкова", "Рогозина", "Майорова", "Блинова", "Парфенова", "Портнова", "Балашова", "Тихомирова", "Барсукова", "Фадеева", "Емельянова", "Большакова", "Сазонова", "Булгакова", "Золотарева", "Николенко", "Турбина", "Олейник", "Шевченко", "Мироненко", "Гриценко", "Коваленко", "Бондаренко", "Ткаченко", "Шаповалова", "Гончарова", "Рыбакова", "Макеева", "Зубова", "Панкратова", "Копылова", "Горшкова", "Майкова", "Емелина", "Вишнякова", "Дроздова", "Кольцова", "Карташова", "Селезнева", "Широкова", "Горбунова", "Анисимова", "Петухова", "Дьяконова", "Щукина", "Кошелева", "Костина", "Горбачева", "Орехова", "Ефремова", "Исакова", "Евсеева", "Бородина", "Сафонова", "Лосева", "Цветкова", "Шишкина",
}

var DefaultTitlesMale = []string{
	"Mr.", "Dr.", "Prof.", "Lord", "King", "Prince",
}
var DefaultTitlesFemale = []string{
	"Mrs.", "Ms.", "Miss", "Dr.", "Prof.", "Lady", "Queen", "Princess",
}

var DefaultMiddleNamesMale = []string{
	"Александрович", "Алексеевич", "Андреевич", "Антонович", "Артемович", "Артурович", "Борисович", "Вадимович", "Валентинович", "Валерьевич", "Васильевич", "Викторович", "Витальевич", "Владимирович", "Владиславович", "Вячеславович", "Георгиевич", "Глебович", "Григорьевич", "Данилович", "Даниилович", "Дмитриевич", "Евгеньевич", "Егорович", "Елисеевич", "Иванович", "Игоревич", "Ильич", "Кириллович", "Константинович", "Леонидович", "Максимович", "Маркович", "Матвеевич", "Михайлович", "Никитич", "Николаевич", "Олегович", "Павлович", "Петрович", "Романович", "Русланович", "Сергеевич", "Станиславович", "Степанович", "Тимофеевич", "Тимурович", "Федорович", "Филиппович", "Юрьевич", "Ярославович",
	"Авраамович", "Адамович", "Адрианович", "Азатович", "Айратович", "Акимович", "Альбертович", "Амирович", "Анатольевич", "Аркадьевич", "Арсеньевич", "Арсенович", "Артемьевич", "Богданович", "Булатович", "Венедиктович", "Виссарионович", "Всеволодович", "Всемилович", "Гаврилович", "Геннадьевич", "Германович", "Глебович", "Давидович", "Демидович", "Денисович", "Дорофеевич", "Ефимович", "Захарович", "Иннокентьевич", "Исаакович", "Казимирович", "Камилевич", "Климович", "Львович", "Леонтьевич", "Лукич", "Макарович", "Миронович", "Мстиславович", "Назарович", "Натанович", "Несторович", "Никифорович", "Остапович", "Платонович", "Прохорович", "Радикович", "Ратмирович", "Ренатович", "Родионович", "Саввич", "Савельевич", "Семенович", "Серафимович", "Тарасович", "Тихонович", "Трофимович", "Фомич", "Харитонович", "Эдуардович", "Эмильевич", "Эрикович", "Янович",
}

var DefaultMiddleNamesFemale = []string{
	"Александровна", "Алексеевна", "Андреевна", "Антоновна", "Артемовна", "Артуровна", "Борисовна", "Вадимовна", "Валентиновна", "Валерьевна", "Васильевна", "Викторовна", "Витальевна", "Владимировна", "Владиславовна", "Вячеславовна", "Георгиевна", "Глебовна", "Григорьевна", "Даниловна", "Данииловна", "Дмитриевна", "Евгеньевна", "Егоровна", "Елисеевна", "Ивановна", "Игоревна", "Ильинична", "Кирилловна", "Константиновна", "Леонидовна", "Максимовна", "Марковна", "Матвеевна", "Михайловна", "Никитична", "Николаевна", "Олеговна", "Павловна", "Петровна", "Романовна", "Руслановна", "Сергеевна", "Станиславовна", "Степановна", "Тимофеевна", "Тимуровна", "Федоровна", "Филипповна", "Юрьевна", "Ярославовна",
	"Авраамовна", "Адамовна", "Адриановна", "Азатовна", "Айратовна", "Акимовна", "Альбертовна", "Амировна", "Анатольевна", "Аркадьевна", "Арсеньевна", "Арсеновна", "Артемьевна", "Богдановна", "Булатовна", "Венедиктовна", "Виссарионовна", "Всеволодовна", "Всемиловна", "Гавриловна", "Геннадьевна", "Германовна", "Глебовна", "Давидовна", "Демидовна", "Денисовна", "Дорофеевна", "Ефимовна", "Захаровна", "Иннокентьевна", "Исааковна", "Казимировна", "Камилевна", "Климовна", "Львовна", "Леонтьевна", "Лукинична", "Макаровна", "Мироновна", "Мстиславовна", "Назаровна", "Натановна", "Несторовна", "Никифоровна", "Остаповна", "Платоновна", "Прохоровна", "Радиковна", "Ратмировна", "Ренатовна", "Родионовна", "Саввична", "Савельевна", "Семеновна", "Серафимовна", "Тарасовна", "Тихоновна", "Трофимовна", "Фоминична", "Харитоновна", "Эдуардовна", "Эмильевна", "Эриковна", "Яновна",
}

type Database map[string]map[string][]string

type PersonDatabase struct {
	Db              Database
	Genders         []string
	Attributes      []string
	AttributesCount int
}

func (pd *PersonDatabase) GetRandomAttribute(gender, attr string, randomIdx uint32) string {
	attrs := pd.Db[gender][attr]
	return attrs[randomIdx%uint32(len(attrs))]
}

func (pd *PersonDatabase) GetRandomGender(randomIdx uint32) string {
	return pd.Genders[randomIdx%uint32(len(pd.Genders))]
}

func NewPersonalDatabase(data Database) *PersonDatabase {
	uniqueAttributes := make(map[string]struct{})
	genders := make([]string, 0, len(data))

	if data == nil {
		panic("data is nil")
	}
	attrsCount := 0
	for gender, attributes := range data {
		genders = append(genders, gender)
		attrsCount = max(len(attributes), attrsCount)
		for attrName := range attributes {
			uniqueAttributes[attrName] = struct{}{}
		}
	}

	attributes := make([]string, 0, len(uniqueAttributes))
	for attrName := range uniqueAttributes {
		attributes = append(attributes, attrName)
	}

	slices.Sort(attributes)

	return &PersonDatabase{
		Db:              data,
		Attributes:      attributes,
		Genders:         genders,
		AttributesCount: attrsCount,
	}
}

var DefaultPersonMap = map[string]map[string][]string{
	MaleGenderName: {
		"Title":      DefaultTitlesMale,
		"LastName":   DefaultLastNamesMale,
		"FirstName":  DefaultFirstNamesMale,
		"MiddleName": DefaultMiddleNamesMale,
	},
	FemaleGenderName: {
		"Title":      DefaultTitlesFemale,
		"LastName":   DefaultLastNamesFemale,
		"FirstName":  DefaultFirstNamesFemale,
		"MiddleName": DefaultMiddleNamesFemale,
	},
}

var DefaultDb = NewPersonalDatabase(DefaultPersonMap)

type NameAttrs struct {
	FirstName  string
	MiddleName string
	LastName   string
	Gender     string
	Title      string
}

type RandomPersonTransformer struct {
	gender     string
	byteLength int
	generator  generators.Generator
	// db - mapping gender to other personal attribute
	// common structure
	// gender -> person_attribute -> []possible values
	db     *PersonDatabase
	result map[string]string
}

func NewRandomPersonTransformer(gender string, personDb Database) *RandomPersonTransformer {

	if personDb == nil {
		personDb = DefaultPersonMap
	}

	db := NewPersonalDatabase(personDb)

	return &RandomPersonTransformer{
		gender: gender,
		// we assume 4 bytes per attribute + 1 byte for gender
		db:         db,
		result:     make(map[string]string, len(db.Attributes)),
		byteLength: len(db.Attributes)*4 + 1,
	}
}

func (rpt *RandomPersonTransformer) GetDb() *PersonDatabase {
	return rpt.db
}

func (rpt *RandomPersonTransformer) GetFullName(gender string, original []byte) (map[string]string, error) {

	resBytes, err := rpt.generator.Generate(original)
	if err != nil {
		return nil, err
	}

	genderRandIdx := resBytes[0]
	gender, err = rpt.getGender(gender, genderRandIdx)
	if err != nil {
		return nil, err
	}

	startIdx := 1
	for _, attr := range rpt.db.Attributes {
		attrIdx := binary.LittleEndian.Uint32(resBytes[startIdx : startIdx+4])
		rpt.result[attr] = rpt.db.GetRandomAttribute(gender, attr, attrIdx)
		startIdx += 4
	}

	return rpt.result, nil
}

func (rpt *RandomPersonTransformer) getGender(gender string, randomGenderIdx byte) (string, error) {
	if gender == "" {
		gender = rpt.gender
	}

	switch gender {
	case MaleGenderName, FemaleGenderName:
	case AnyGenderName:
		gender = rpt.db.GetRandomGender(uint32(randomGenderIdx))
	default:
		return "", fmt.Errorf("unable to match gender \"%s\"", gender)
	}
	return gender, nil
}

func (rpt *RandomPersonTransformer) GetRequiredGeneratorByteLength() int {
	return rpt.byteLength
}

func (rpt *RandomPersonTransformer) SetGenerator(g generators.Generator) error {
	if g.Size() < rpt.byteLength {
		return fmt.Errorf("requested byte length (%d) higher than generator can produce (%d)", rpt.byteLength, g.Size())
	}
	rpt.generator = g
	return nil
}
